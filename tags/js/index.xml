<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on Who am I</title>
    <link>http://blog.hxsf.me/tags/js/</link>
    <description>Recent content in js on Who am I</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Oct 2016 02:11:16 +0000</lastBuildDate>
    
	<atom:link href="http://blog.hxsf.me/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>没啥用的 JavaScript 字符串模板</title>
      <link>http://blog.hxsf.me/post/useless-string-template/</link>
      <pubDate>Tue, 11 Oct 2016 02:11:16 +0000</pubDate>
      
      <guid>http://blog.hxsf.me/post/useless-string-template/</guid>
      <description>最近在做些关于模板引擎的事情，花半小时搞了个简陋版的字符串模板。 追求简便，直接添加到 String.prototype 上了。 How it work String.prototype.format = (function() { // debug_level: [0, 1, 2] =&amp;gt; [&amp;#39;igorne&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;error&amp;#39;] var default_option = { l_token: &amp;#39;{{&amp;#39;, r_token: &amp;#39;}}&amp;#39;, debug_level: 1 } var vail = function (raw, key, debug_level) { if (raw === null) {return &amp;#39;&amp;#39;;} if (raw === undefined) { switch (debug_level) { case 2: throw new Error(&amp;#39;the</description>
    </item>
    
    <item>
      <title>事件绑定和事件委托 (以 jQuery 为例)</title>
      <link>http://blog.hxsf.me/post/shi-jian-bang-ding-he-shi-jian-wei-tuo-yi-jquery-wei-li-2/</link>
      <pubDate>Fri, 30 Jan 2015 21:38:00 +0000</pubDate>
      
      <guid>http://blog.hxsf.me/post/shi-jian-bang-ding-he-shi-jian-wei-tuo-yi-jquery-wei-li-2/</guid>
      <description>随着DOM结构的复杂化和Ajax等动态脚本技术的运用，事件委托自然浮出了水面。jQuery为绑定和委托事件提供了 .bind() 、.live() 和 .delegate() 方法。本文在讨论这几个方法内部实现的基础上，展示它们的优劣势及适用</description>
    </item>
    
  </channel>
</rss>